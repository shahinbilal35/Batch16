All trigger context variables studied till date

- Trigger.isBefore
- Trigger.isAfter
- Trigger.isInsert
- Trigger.isUpdate
- Trigger.isDelete

- Trigger.New
    - Newly inserted or updated records
    - datatype of trigger.new?
        - list<sObject> -> sObject will depend on trigger
    - Available in before insert ?
        - Yes. ID is null. CreatedDate, CreatedBy and other system fields are also NULL.
            - why id is null?
                - ID is null because record is NOT YET created.
    - Available in after insert?
        - Yes. Id is present. Record is created.
    - Available in before update and after update?
        - Yes. 
            Field values are same or different?
                - All standard and custom fields values is same for trigger.new in before and after update. BUT some of the system fields might be different, ex: last modified date
- Trigger.Old
    - Datatype of trigger.old?
        - list<sObject>
    - Old snapshot, immediate previous data
    - Available in before insert and after insert?
        - NOT available. It is NULL
        - if record is brand new what is gonna be trigger.old?
            - Null
    - Available in before update and after update?
        - Yes.
        - Same values of trigger.old in before update and after update?
            - Same.

- Trigger.NewMap
    - map<id, sObject>
    - newly inserted or updated record.
    - Available in which Events? 
        - after insert. NOT available in before insert. Why? Bcz no id.
        - before update, after update?
            - yes.

- Trigger.OldMap
    - map<id, sobject>.
    - previous version of updated record.
    - Available in which events?
        - Before update,after update, before delete, after delete

//how can we check if we have update ONE particular field?
    //trigger.isUpdate
        // old record field value != new record field value
    Before Trigger?
    - validation
    - update the record which is being inserted or updated. 

After Trigger?
    - DML - to insert/update/delete related or unrelated records
    - If we require ID while inserting we use After trigger.
    - Any long running processes are done in after.
    - can we do validation here? allowed to validate (addError), but we don't prefer.




Can yo write Rolllup summary for lookup field by using triggerhandler
Account object as parent and Contact object as child
Account object Account record field 
Number_of_Contacts__c should be updated to Count of all related Contact records
    When contacts are inserted/updated/deleted/undeleted.





    Async Apex
    - Running behind the scenes.
    - 4 types.
        - future, batch, queueable, schedulable

Future
    - @future -- annotate method with this annotation
    - static. 
    - void only (nothing returns)
    - parameters? 
        - no sObject. No list<sObject>
        - only primitive, or collection of primitive datatype
        how many parameters we can have in future method? (trick)
            - any number
            - ideal is less than 6 (for any method)
    - cannot call future method from future method (directly or indirectly)
        - inserting department
            - department Trigger
                - department handler future method
                    -insert employee
                        - Employee trigger execution
                            - calling another future method

Test Future
    - startTest and StopTest are mandatory.
   














Test
    - annotation? @isTest
    - we must do @isTest in test class.
    - is @isTest compulsary for test method?
    - testmethod must be static. It can be public or private. It must return VOID. And doesn't take any parameter.
    - can we have a method inside test class without @isTest?
        - yes, we can have a non test method inside test class.
    - if we do any DML from test method can we insert/update org records?
        - NO.
    - soql inside testmethod can we fetch records from org?
        - by befault we cannot get records from the org.
    - assertion is mandatory almost always.
    - minmun 75% code coverage.

- Each TestMethod has its own test world.
- Each TestMethod gets FULL Governor Limits